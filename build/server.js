var i=(b,R)=>{throw{code:b,message:R}};var w=(b)=>{return new Proxy(new URLSearchParams(b),{get:(R,j)=>R.get(j)})};var A=async(b,R,j,f)=>{const z=f.method.charCodeAt(0)===71;if(!R)i(404,"Procedure not provided");else if(!(R in b))i(404,`Procedure [${R}] does not exist`);const g=b[R];if(g.input){const k=z?w(j.search):await f.json();return g.input(k),await g.handler(k,f)}else return await g.handler(null,f)};var B=(b,R)=>({type:"query",input:b,handler:R});var C=(b,R)=>({type:"mutation",input:b,handler:R});export{B as query,C as mutation,A as execute,i as error};
